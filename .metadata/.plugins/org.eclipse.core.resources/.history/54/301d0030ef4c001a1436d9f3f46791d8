package ar.com.veterinaria.app.controller;

import org.springframework.stereotype.Controller;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import ar.com.veterinaria.app.service.BreedService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Controller
@RequestMapping(value = "/breed", produces = MediaType.APPLICATION_JSON_VALUE)
@Validated
@Api(tags = "Breed", description = "Endpoint for Breed management")
public class BreedController {

	private static final Logger logger = LoggerFactory.getLogger(BreedController.class);

	@Autowired
	BreedService vehicleService;

	@Autowired
	public BreedController(BreedService breedService) {
		this.vehicleService = breedService;
	}

	@GetMapping
	@RequestMapping(value = "/new-vehicle", method = RequestMethod.POST)
	@ApiOperation(value = "Create a new Vehicle", notes = "Create a new Vehicle.", response = Vehicle.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successful retrieval of Vehicle List", response = Vehicle.class),
			@ApiResponse(code = 500, message = "Internal server error") })
	public ResponseEntity<Vehicle> create(@RequestBody Vehicle vehicle) throws VehicleDuplicatedException {
		try {
			if (vehicleService.exist(vehicle)) {
				throw new VehicleDuplicatedException(vehicle.getModel());
			}
			vehicleService.add(vehicle);
			return new ResponseEntity<Vehicle>(vehicle, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
	}

	@GetMapping
	@RequestMapping(value = "/get-list-vehicle", method = RequestMethod.GET)
	@ApiOperation(value = "Returns List of Vehicle", notes = "Returns a complete list of Vehicle details.", response = Vehicle.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successful retrieval of Address List", response = Vehicle.class),
			@ApiResponse(code = 500, message = "Internal server error") })
	public ResponseEntity<List<Map<String, Object>>> getAll() {
		try {
			List<Map<String, Object>> result = vehicleService.findAll();
			return ResponseEntity.status(HttpStatus.OK).body(result);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	@ApiOperation(value = "Search a Vehicle by ID", response = Vehicle.class)
	@ApiResponses({ @ApiResponse(code = 200, message = "OK"),
			@ApiResponse(code = 403, message = "Operation is forbidden"),
			@ApiResponse(code = 500, message = "Server error") })
	public ResponseEntity<Vehicle> getById(@PathVariable("id") int id) throws VehicleNotFoundException {
		try {
			Vehicle vehicle = (Vehicle) vehicleService.findById(id);
			if (vehicle != null) {
				return ResponseEntity.status(HttpStatus.OK).body(vehicle);
			} else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.PUT)
	@ApiOperation(value = "Update a Vehicle by ID", response = Vehicle.class)
	@ApiResponses({ @ApiResponse(code = 200, message = "OK"),
			@ApiResponse(code = 403, message = "Operation is forbidden"),
			@ApiResponse(code = 500, message = "Server error") })
	public ResponseEntity<Void> update(@PathVariable("id") int id, @RequestBody Vehicle vehicle)
			throws VehicleNotFoundException {
		try {
			vehicleService.update(id, vehicle);
			return ResponseEntity.status(HttpStatus.OK).build();
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ApiOperation(value = "Delete a Vehicle by ID", response = Vehicle.class)
	@ApiResponses({ @ApiResponse(code = 200, message = "OK"),
			@ApiResponse(code = 403, message = "Operation is forbidden"),
			@ApiResponse(code = 500, message = "Server error") })
	public ResponseEntity<Void> delete(@PathVariable("id") int id) throws VehicleNotFoundException {
		try {
			vehicleService.remove(id);
			return ResponseEntity.status(HttpStatus.OK).build();
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
	}

}
